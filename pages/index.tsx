import Head from 'next/head'
import { useEffect, useRef, useState } from 'react'
import { HeaderFixed } from '../components/HeaderFixed'
import { TextInput } from '../components/TextInput'
import { ToastContainer } from 'react-toastify';
import useAutosizeTextArea from '../functions/useAutosizeTextArea'
import styles from '../styles/Home.module.css'
import {
  example01,
  example02,
  example03,
  example04,
} from '../functions/examples';
import { handleWordLimitToast } from '../components/WordLimitToast'
import styled from 'styled-components';
import { subscribe, isSupported } from 'on-screen-keyboard-detector';




const TestDiv = styled.div`
  float: left;
  color: white;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width : 100px;
  height: 100px;
  border-radius: 50%;
  background-color: orange;
`

const TextInputContianer = styled.div`
  scroll-padding-top: 50px;
  position: relative;
  display: inline-block;
`
export default function Home() {
  const [value, setValue] = useState("");
  const textAreaRef = useRef<HTMLTextAreaElement>(null);
  const [exampleDataList, setExampleDataList] = useState<string[]>([]);
  const [isKeyboardUp, setIsKeyboardUp] = useState(false);

  useAutosizeTextArea(textAreaRef.current, value);

  const handleChange = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {
    const val = evt.target?.value;
    setValue(val);
    if (val.length > 5) {
      console.log('is it work?');
      handleWordLimitToast();
    }
  };

  if (isSupported()) {
    const unsubscribe = subscribe(visibility => {
      if (visibility === "hidden") {
        setIsKeyboardUp(false);
      }
      else { // visibility === "visible"
        setIsKeyboardUp(true);
      }
    });   
    // After calling unsubscribe() the callback will no longer be invoked.
    unsubscribe();
  }

  useEffect(() => {
    const ex1 = example01();
    const ex2 = example02();
    const ex3 = example03();
    const ex4 = example04();
    const list = [ex1, ex2, ex3, ex4];
    setExampleDataList(list);

    

  }, []);
  
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <HeaderFixed/>
      {/* <HeaderSticky /> */}
      <TextInputContianer>
        {isKeyboardUp
          ? <TestDiv>VISIBLE</TestDiv>
          : <TestDiv>NONVISIBLE</TestDiv>
        }
        <TextInput textAreaRef={textAreaRef} handleChange={handleChange} />
      </TextInputContianer>
      {/* ===== 3. ToastContainer for rendering word limit toast ===== */}
      <ToastContainer
        progressClassName="toastProgress"
        bodyClassName="toastBody"
        closeButton={false}
        toastStyle={{ backgroundColor: '#f8dbd5' }}
        containerId="words"
      />
      <h1 className={styles.title}>Device Check</h1>

        <div className={styles.description}>
          <table className={styles.table}>
            <tbody>
              {exampleDataList.map((item, id) => {
                return (
                  <tr key={id}>
                    <td>
                      <strong>EX{id + 1}</strong>
                    </td>
                    <td>You are using: </td>
                    <td>
                      <code className={styles.code}>{item}</code>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
    </>
  )
}
